# Aishwarya Gupta 07700006172 CodingAssignment2
# Client using customized protocol on top of UDP protocol for requesting identification from server for access permission to the cellular network.

This is a client-server socket program written in C. It demonstrates a simulation of client’s software module acting on behalf of a cell phone.
The client’s software module sends the request for identification of its device in a packet to the server; the packet has the information: 
Start of Packet identifier ..... 0XFFFF
End of Packet identifier. ..... 0XFFFF
Client Id....................................Maximum 0XFF (255 Decimal)
Acc_Per (Access Permission)...........0XFFF8
Length .....................................Maximum 0XFF (255 Decimal)
Source Subscriber No....................Maximum 0XFFFFFFFF (4294967295 Decimal)

Server opens and reads a file named “Verification_Database.txt”, the contents of this file will be saved on the server, which contains the Subscriber’s Number, Technology, and payment status (paid = 1, not paid = 0).
After verifying the content of Identification request packet with the content of the Verification_Database.txt file, one of the following messages will be generated by the server:
a. Subscriber has not paid message
b. Subscriber does not exist on database message
c. Subscriber permitted to access the network message

## Instructions:

### Server:

1. Open a terminal.

2. Navigate to the 'server' directory.

3. Compile the server program:
    ```bash
    gcc server.c -o server
    ```

4. Run the server:
    ```bash
    ./server
    ```
   This will start the server, and it will wait for incoming UDP packets.

### Client:

1. Open another terminal.

2. Navigate to the 'CodingAssignment1' directory.

3. Compile the client program:
    ```bash
    clang client.c -o client
    ```

4. Run the client:
    ```bash
    ./client
    ```
   This will prompt you to enter a client ID and populate data packets. The client will then send these packets to the server.

**Note**: Ensure that the server is running before starting the client.

## Customization:

- The programs use a custom packet structure defined in 'custom_packet.h'. You can modify this structure according to your requirements.

- The server reads a verification database file ('Verification_Database.txt'). You may want to customize the file or database interaction based on your application.

- Adjust the IP address and port number in the server and client programs if needed. The default port is set to 8888.

## Troubleshooting:

- If there are any compilation errors, ensure that you have the required libraries installed, and the necessary headers are included.

- Check for proper permissions if there are issues with creating or binding sockets.

- Ensure that there are no conflicts with the specified port number.

- If the client is not receiving packets, check if server.c is running .

